import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt

# Load the dataset
dataset = pd.read_csv("MalwareData.csv", sep='|')

# Prepare data and labels
features_to_drop = ['Name', 'md5', 'legitimate']
X = dataset.drop(features_to_drop, axis=1).values
y = dataset['legitimate'].values

# Train an ExtraTreesClassifier for feature selection
extratrees = ExtraTreesClassifier().fit(X, y)
select = SelectFromModel(extratrees, prefit=True)
X_selected = select.transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2)

# Train a RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)
rfc.fit(X_train, y_train)

# Make predictions
y_pred = rfc.predict(X_test)

# Evaluate the model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred), "\n")

print("Classification Report:")
print(classification_report(y_test, y_pred))

accuracy = accuracy_score(y_test, y_pred)
print(f"The accuracy score (in percentage) of the algorithm: {accuracy * 100}")

# Optional: Plot feature importance
importance = extratrees.feature_importances_
indices = np.argsort(importance)[::-1]
plt.bar(range(X_selected.shape[1]), importance[indices])
plt.xticks(range(X_selected.shape[1]), indices)
plt.xlabel("Feature Index")
plt.ylabel("Importance")
plt.title("Feature Importance")
plt.show()
